Ctrl + Shift + M تب پرابلم وا میکنه

format on save اینو تو وی اس کد سرچ میکنیم که وقتی سیو میکنی فایلو فرمت کنه کدارو 

Ctrl + Alt + N میاد افزونه کد رانر رو اجرا میکنه

پیاده سازی های پایتون : cpython(C) - jython(java) - ironPython(C#) - pypy(python in python)

دورن پایتون یک سری فانکشن داخلی داریم برای کار کردن با استرینگ : 

کامنت هارو با علامت شارپ میزاریم در پایتون #

کامنت ها باید کوتاه و خلاصه باشند در حد چند کلمه

همه اپریتور هارو میشه به صورت اپریتور = عدد محاسبه کرد برای مثال :x = 3  x += 10 ---> 13 | x *= 10 ---> 30

در کامنت درمورد چگونگی صحبت نکنید درباره چرایی صحبت کنید

کامنت گذاشتن زیاد درست نیست و در جاهایی که نیازه باید استفاده شه

با سرچ کردن python 3 math mdule متیونیم همه متد هاش رو تست کنیم و دربارشون بخونیم

برای گرفتن اینپوت از کاربر باید توی تب تریمنال کدمون رو اجرا کنیم چون که تب اوت پوت رید انلی هست

عملگر های مقایسه ای برای مقدار استرینگ به این شکل هستند که از حرف اول کلمات شروع میکنه و جایگاه حروف رو در حروف الفبا مقایسه میکنه و اگر مساوی بودند این کار ادامه پیدا میکنه تا به جواب درست برسیم

با فانکشن اورد میتونیم نمایش عددی حروف و عدد جایگاهشون در حروف الفبا رو ببینیم

نمایش عددی حروف کوچیک متفاوت هست با نمایش عددی حروف بزرگ یعنی ای کوچیک با ای بزرگ در پایتون نمایش عددیشون فرق میکنن

با استفاده از کلمه کلیدی بریک میتونیم حلقه رو متوقف کنیم و دیگه به تکرار های بعدی نریم Break

در حلقه های تو در تو تا کار حلقه داخلی تموم نشه به سراغ تکرار بعدی حلقه بیرونی نمیریم

از ارایه یا همون لیست ها میتوان برای حلقه استفاده کرد

با استفاده از کیورد ارگیومنتس میتونیم جای ورودی های فانکشن رو عوض کنیم ---> keyWordArgumentsSeventhDay.py 

همه یه پارامتر های دیفالت ها باید بعد از پارامتر های اجباری بیان که میشه پارامتر اول

تاپل ها دقیقا مثل لیست هستند ولی نمیشه اونها تغییر داد و چیزی بهشون اضافه یا حذف کرد

تاپل ها اتریبل هستند و میشه توی حلقه ها ازشون استفاده کرد ---> argsEighthDay.py

اگر دو تا استریکس قبل از پارامتر فانکشن داشته باشیم میتونیم هر مقدار که خواستیم کی ولیو به عنوان ورودی به فانکشن پاس بدیم و فانکشن به طور اتوماتیک این رو میندازه داخل دیکشنری ---> args2EighthDay.py

با استفاده از کلمه گلوبال قبل از متغیر درون فانکشن میتوانیم از متغیر بیرون فانکشن درون فانکشن استفاده کنیم و مقدارش را تغییر بدهیم ---> scopeEighthDay.py

برای دیباگینگ فایل های پایتون میتوانیم به تب دریباگینگ در ادیتور خود بوریم و به سادگی دیباگ را شروع کنیم

عناصر مختلف یک لیست میتوانند تایپ های مختلفی داشته باشند

برای ایجاد یک لیست میتوانیم از متد لیست استفاده کنیم اما ورودی آن باید یک مقدار ایتریبل و قابل پیمایل باشد مانند خروجی فانکشن رنج و مقدار استرینگ  ---> listNinthDat.py - line 12

برای انپک کردن یک لیست باید تعداد متغیر هایی که داریم با تعداد عناصر لیست برابر باشه که ارور نده اما میتوانیم یک متغیر اخر تعریف کنیم و قبل از آن استار بگذاریم تا بقیه عناصر رو به صورت آرایه درون ان بریزد ---> unpackTheListTenthDay.py

برای دسترسی به ایندکس ارایه در حلقه باید از فانکشن اینیومریت استفاده کنیم که برای ما یک تاپل برمیگردونه و عنصر اول ایندس و عنصر دوم ولیو آرایه ما هست ---> listNavigationTenthDay.py

برای اضافه کردن یک عنصر به لیست از متد اپند استفاده میکنیم --->‌ addAndRemoveListItemsEleventhDay.py

برای جایگذاری یک عنصر در لیست در ایندکس دلخواد از متد اینزرت استفاده میکنیم به عنوان ورودی اول ایندکس دلخواه و به عنوان ورودی دوم ولیو دلخواه رو پاس میدیم ---> addAndRemoveListItemsEleventhDay.py

برای حذف عنصر در لیست از متد پاپ استفاده میکنیم این متد در حالت دیفالت ایتم اخر لیست رو حذف میکنه و میتوانیم به عنوان ورودی ایندکس ایتم دلخواه رو بدیم تا حذف کنه و برای ما برگردونه --->‌ addAndRemoveListItemsEleventhDay.py

برای حذف ایتم میتوانیم از متد ریموو هم استفاده کنیم باید به این متد ولیو ایندکسی که میخوایم حذف کنیم رو پاس بدیم

متد کلیر تمامی عناصر لیست رو حذف میکنه

برای اینکه بفهمیم از یک عنصر چند تا در لیست وجود دارد از متد کاونت استفاده میکنیم ---> findItemsInListEleventhDay.py

برای ساخت انانیموس فانکشن در پایتون باید از کلمه کلیدی لمبدا استفاده کنیم ---> lambdaFunctionTwelfthDay.py

برای فیلتر کردن مقادیر یک ارایه از فانکشن داخلی فیلتر استفاده میکنیم ---> filterListTwelfthDay.py

براس ساخت یک تاپل اگر پرانتز هارو هم قرار ندیم مفسر پایتون این رو یک تاپل در نظر میگیره ---> tupleThirsteenthDay.py

اگر بخوایم یک تاپل یک عنصری بدون گذاشتن پرانتز داشته باشیم باید بعد عنصرمون یک کاما بزاریم ---> tupleThirsteenthDay.py

برای تبدیل یک لیست با تاپل باید از فانکشن درونی تاپل استفاده کنیم ---> tupleThirsteenthDay.py

نکته : تاپل همون لیسته فقط قابل تغییر نیست

آرایه حافظه کمتری رو اشغال میکنه و بهینه تر عم میکنه و باید جایی که نیاز به پرفورمنس بالاست از ارایه استفاده کنیم

برای استفاده از آرایه در پایتون باید ماژولش رو ایمپورت کنیم

تایپ همه عناصر داخل یک ارایه باید یکسان باشند 

یک ساختمان داده در پایتون داریم به نمام ست که مجموعه ای از عناصر هستش که در اون عنصر تکراری وجود نداره ---> setFourteenthDay.py

برای ساختن ست باید از کروشه استفاده کنیم ---> setFourteenthDay.py

با استفاده از ست میتوانیم یک سری عملیات های ریاضی برای مثال اجتماع را داشته باشیم یعنی ترکیب عنصر های هر دو ستمون رو ---> setFourteenthDay.py

جنریتور ها خیلی بهینه تر هستند و برای استفاده از دیتا های بزرگ بهتره از اینها استفاده کنیم چون فضای حافظه رو اشغال نمیکنند

استفاده از اکسپشن در برنامه زمان بیشتری میبره برای اجرای کد

برای اسم گذاری کلس ها باید حرف اول نام کلس بزرگ باشه و این یک قرار داد هست ---> classNineteenthDay.py - line 1

همه یه فانکشن های پایتون باید حداقل یک پارامتر داشته باشند و به صورت توافقی اسم اون فانکشن رو سلف قرار میدن ---> classNineteenthDay.py - line 2

با استفاده از متد ایز اینستنس که دو تا ورودی میگیره میتونیم بفهمیم که ابجکتمون توسط کلسی که میدیم بهش ساخته شده یا نه ---> classNineteenthDay.py - line 14

به متد هایی که قبل و بعدشون دو تا اندرلاینه میگن مجیک متد

برای تعریف کلس اتریبیوت یک متغیر داخل کلس تعریف میکنیم و میتونیم با صدا کردن کلس به اون اتریبیوت دسترسی داشته باشیم ---> classVsInstanceAttributesTwelfthDay.py - line 1, 12, 13

به دو صورت میشه به کلس اتریبیوت دسترسی داشت هم به وصیله ابجگت و هم به وصیله کلسمون ---> classVsInstanceAttributesTwelfthDay.py - line 12, 13

مجیک متد اس تی ار مقدار ریترنیه فانکشن رو کنترل میکنه و با این مجیک متد میتونیم تغییرش بدیم --->  magicMethodTwentyFirstDay.py - line 6

برای فهمیدن مساوی بودن دو ابجکت از مجیک متد ای کیو استفاده میکنیم ---> compareObjectsTwentyFirstDay.py - line 5 

برای مقایسه کوچک یا بزرگ تر بودن مقادیر ابجکد از مجیک متد جی تی استفاده میکنیم ---> compareObjectsTwentyFirstDay.py - line 7

برای جمع ورودی های ابحکت ها از مجیک متد اد استفاده میکنیم ---> computationalOperatorsInClassesTwentyFirstDay.py - line 8, 14